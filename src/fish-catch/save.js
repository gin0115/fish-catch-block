/**
 * Retrieves the translation of text.
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 */
import { useBlockProps } from '@wordpress/block-editor';

/**
 * The save function defines the way in which the different attributes should
 * be combined into the final markup, which is then serialized by the block
 * editor into `post_content`.
 */
export default function save({ attributes, className }) {
	const { locationAddress, latitude, longitude, catches, sizeUnit, weightUnit, defaultView, cardBackgroundColor, cardBorderColor, cardBorderRadius, imageSize, mapStyle } = attributes;
	const blockProps = useBlockProps.save({ className });

	// IDs will be generated by frontend JavaScript to avoid block validation issues

	// Helper function to get fish initials
	const getFishInitials = (species) => {
		if (!species) return '?';
		return species.split(' ').map(word => word.charAt(0)).join('').toUpperCase().substring(0, 2);
	};

	// Helper function to get the appropriate image URL for different views
	const getImageUrl = (mediaItem, viewType) => {
		if (!mediaItem || !mediaItem.sizes) return mediaItem?.url || '';
		
		const sizes = mediaItem.sizes;
		
		switch (viewType) {
			case 'list':
				// Use fish-catch-thumb or fallback to thumbnail
				return sizes['fish-catch-thumb']?.url || sizes.thumbnail?.url || mediaItem.url;
			case 'grid':
				// Use fish-catch-grid or fallback to medium
				return sizes['fish-catch-grid']?.url || sizes.medium?.url || mediaItem.url;
			case 'lightbox':
				// Use full size for lightbox
				return sizes.full?.url || mediaItem.url;
			default:
				return mediaItem.url;
		}
	};
console.log('Rendering catches:', catches); // Debug log

	return (
		<div { ...blockProps } className="fish-catch-block">
			{/* Location Section */}
			{locationAddress && (
				<div className="location-section">
					<h3>
						üìç {locationAddress}
					</h3>
					{latitude && longitude && (
						<div className="location-links">
							<a 
								href={`https://www.google.com/maps?q=${latitude},${longitude}`}
								target="_blank"
								rel="noopener noreferrer"
							>
								üó∫Ô∏è Google Maps
							</a>
							<a 
								href={`https://maps.apple.com/?q=${latitude},${longitude}`}
								target="_blank"
								rel="noopener noreferrer"
							>
								üçé Apple Maps
							</a>
							<a 
								href={`https://www.bing.com/maps?q=${latitude},${longitude}`}
								target="_blank"
								rel="noopener noreferrer"
							>
								üîç Bing Maps
							</a>
							<a 
								href={`https://www.openstreetmap.org/?mlat=${latitude}&mlon=${longitude}&zoom=15`}
								target="_blank"
								rel="noopener noreferrer"
							>
								üåç OpenStreetMap
							</a>
							<a 
								href={`https://what3words.com/`}
								target="_blank"
								rel="noopener noreferrer"
							>
								üìç What3Words
							</a>
						</div>
					)}
				</div>
			)}

			{/* Map Section */}
			{latitude && longitude && (
				<div className="map-section">
				<div 
					data-lat={latitude} 
					data-lng={longitude} 
					data-location={locationAddress || 'Fishing Location'} 
					data-map-style={mapStyle || 'OpenStreetMap.Mapnik'}
					data-catchcount={catches ? catches.length : 0}
					className="map-container"
				></div>
				</div>
			)}

			{/* Catches Section */}
			{catches && catches.length > 0 && (
				<div className="catches-section">
					<div className="catches-header">
						<h3>
							üé£ {__( 'Fish Caught', 'fish-catch' )} ({catches.length})
						</h3>
						
						{/* View Toggle */}
					<div className="view-toggle-container">
							<button 
								className={`view-btn ${defaultView === 'list' ? 'active' : ''}`}
								data-view="list-view"
							>
								üìã List
							</button>
							<button 
								className={`view-btn ${defaultView === 'grid' ? 'active' : ''}`}
								data-view="grid-view"
							>
								üî≤ Grid
							</button>
						</div>
					</div>
					
					<div className={`catches-grid ${defaultView}-view`}>
						{catches.map((catchItem, index) => (
							// Console log to debug catchItem data
							console.log('Rendering catch item:', catchItem),
							<div 
								key={index} 
								className="catch-card" 
								style={{ 
									border: `1px solid ${cardBorderColor}`, 
									borderRadius: `${cardBorderRadius}px`, 
									backgroundColor: cardBackgroundColor
								}}
							>
								{/* List View Layout */}
								<div className={`list-view-content ${defaultView === 'list' ? 'show' : 'hide'}`}>
									{/* Compact Media */}
									{catchItem.media && catchItem.media.length > 0 ? (
										<div className="compact-media">
											<div 
												className="catch-media-gallery catch-media-gallery-list" 
												data-media={JSON.stringify(catchItem.media.map(item => {
													const actualMedia = Array.isArray(item) ? item[0] : item;
													return {
														url: getImageUrl(actualMedia, 'lightbox'),
														alt: actualMedia.alt || `Catch photo`,
														mime: actualMedia.mime
													};
												}))}
											>
												{(() => {
													const firstMedia = Array.isArray(catchItem.media[0]) ? catchItem.media[0][0] : catchItem.media[0];
													return firstMedia.mime && firstMedia.mime.startsWith('image/') ? (
														<img 
															src={getImageUrl(firstMedia, 'list')} 
															alt={firstMedia.alt || `Catch photo`}
															className="catch-image catch-image-list"
														/>
													) : (
														<video 
															src={firstMedia.url} 
														/>
													);
												})()}
												{catchItem.media.length > 1 && (
													<div className="catch-media-overlay">
														+{catchItem.media.length - 1}
													</div>
												)}
											</div>
										</div>
									) : (
										<div className="catch-media-placeholder catch-media-placeholder-list">
											{getFishInitials(catchItem.species)}
										</div>
									)}

									{/* Content */}
									<div className="catch-content">
										<div className={`catch-header ${catchItem.comments ? 'with-comments' : 'no-comments'}`}>
											<h4 className="catch-title">
												{catchItem.species || __( 'Unknown Species', 'fish-catch' )}
											</h4>
											{(catchItem.size || catchItem.weight) && (
												<span className="catch-measurements">
													({[
														catchItem.size && `${catchItem.size}${sizeUnit || 'cm'}`,
														catchItem.weight && `${catchItem.weight}${weightUnit || 'kg'}`
													].filter(Boolean).join(' ‚Ä¢ ')})
												</span>
											)}
										</div>
										{catchItem.comments && (
											<p className="catch-comments">
												"{catchItem.comments}"
											</p>
										)}
									</div>
								</div>

								{/* Grid View Layout */}
								<div className={`grid-view-content ${defaultView === 'grid' ? 'show' : 'hide'}`}>
									{/* Grid Header */}
									<div className="grid-header">
										<h4 className="catch-title">
											{catchItem.species || __( 'Unknown Species', 'fish-catch' )}
										</h4>
										{(catchItem.size || catchItem.weight) && (
											<p className="catch-measurements">
												{[
													catchItem.size && `${catchItem.size}${sizeUnit || 'cm'}`,
													catchItem.weight && `${catchItem.weight}${weightUnit || 'kg'}`
												].filter(Boolean).join(' ‚Ä¢ ')}
											</p>
										)}
										{catchItem.comments && (
											<p className="catch-comments">
												"{catchItem.comments}"
											</p>
										)}
									</div>

									{/* Grid Media - Show only first image */}
									{catchItem.media && catchItem.media.length > 0 ? (
										<div 
											className="catch-media-gallery catch-media-gallery-grid" 
											data-media={JSON.stringify(catchItem.media.map(item => {
												const actualMedia = Array.isArray(item) ? item[0] : item;
												return {
													url: getImageUrl(actualMedia, 'lightbox'),
													alt: actualMedia.alt || `Catch photo`,
													mime: actualMedia.mime
												};
											}))}
										>
											{(() => {
												const firstMedia = Array.isArray(catchItem.media[0]) ? catchItem.media[0][0] : catchItem.media[0];
												return firstMedia.mime && firstMedia.mime.startsWith('image/') ? (
													<img 
														src={getImageUrl(firstMedia, 'grid')} 
														alt={firstMedia.alt || `Catch photo`}
														className="catch-image catch-image-grid"
													/>
												) : (
													<video 
														src={firstMedia.url} 
														controls
													/>
												);
											})()}
											{catchItem.media.length > 1 && (
												<div className="catch-media-overlay catch-media-overlay-grid">
													+{catchItem.media.length - 1}
												</div>
											)}
										</div>
									) : (
										<div className="no-media-placeholder">
											<div className="no-media-initials">
												{getFishInitials(catchItem.species)}
											</div>
											<div className="no-media-text">
												No photos
											</div>
										</div>
									)}
								</div>
							</div>
						))}
					</div>
				</div>
			)}

			{/* No catches message */}
			{(!catches || catches.length === 0) && (
				<div className="no-catches">
					<p>
						{__( 'No fish caught yet. Add your first catch!', 'fish-catch' )}
					</p>
				</div>
			)}
		</div>
	);
}
